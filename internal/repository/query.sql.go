// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET completed = 1
WHERE id = ?
RETURNING id, title, completed, created_at
`

func (q *Queries) CompleteTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const findAllTasks = `-- name: FindAllTasks :many
SELECT id, title, completed, created_at FROM tasks ORDER BY created_at
`

func (q *Queries) FindAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUnfinishedTasks = `-- name: FindAllUnfinishedTasks :many
SELECT id, title, completed, created_at FROM tasks WHERE completed = 0 ORDER BY created_at
`

func (q *Queries) FindAllUnfinishedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, findAllUnfinishedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newTask = `-- name: NewTask :one
INSERT INTO tasks (title)
VALUES (?)
RETURNING id, title, completed, created_at
`

func (q *Queries) NewTask(ctx context.Context, title string) (Task, error) {
	row := q.db.QueryRowContext(ctx, newTask, title)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const reverseCompleteTask = `-- name: ReverseCompleteTask :one
UPDATE tasks
SET completed = 0
WHERE id = ?
RETURNING id, title, completed, created_at
`

func (q *Queries) ReverseCompleteTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, reverseCompleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}
